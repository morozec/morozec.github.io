{"version":3,"sources":["me.jpg","components/TopBar.js","components/Experience.js","components/Education.js","components/About.js","components/Contacts.js","components/Profile.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopBar","useState","isOpen","setIsOpen","Navbar","color","dark","expand","Container","NavbarBrand","tag","Link","to","src","profilePic","className","alt","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","getDuration","duration","years","parseInt","months","yearsStr","monthStr","Experience","Row","Col","profile","experiences","map","experience","i","moment","locale","totalDuration","roles","reduce","cnt","role","startDate","timeEnd","currentJob","Date","endDate","diff","Number","asMonths","toPrecision","key","Media","left","top","href","url","object","logo","companyName","body","heading","j","title","format","location","descriptions","description","k","Education","studies","study","institute","graduationYear","year","durationInYears","value","certifications","certification","verification","verificationLink","issueDate","issuer","About","Contacts","Profile","activeTab","setActiveTab","Jumbotron","summary","exact","path","component","render","props","tabs","classnames","active","navLink","TabContent","TabPane","tabId","Footer","icon","faGithub","App","Boolean","window","hostname","match","baseUrl","document","getElementsByTagName","getAttribute","ReactDOM","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39fb34c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.ac2243d7.jpg\";","import React, {useState} from 'react'\r\nimport {Container, Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\r\nimport profilePic from '../me.jpg'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nconst TopBar = () => {\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n    const toggle = () => {\r\n        setIsOpen(!isOpen)\r\n    }\r\n\r\n    return (\r\n        <Navbar color='dark' dark expand='md'>\r\n            <Container>\r\n                <NavbarBrand tag={Link} to=\"/\">\r\n                    <img src={profilePic} className='profile-pic' alt='Andrei Morozov'/>\r\n                    <span>Андрей Морозов!!</span>\r\n                </NavbarBrand>\r\n\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav className='ml-auto' navbar>\r\n                        <NavItem>\r\n                            <NavLink tag={Link} to =\"/about\">Обо мне</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink tag={Link} to=\"/contacts\">Контакты</NavLink>\r\n                        </NavItem>\r\n                    </Nav>                    \r\n                </Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default TopBar","import React from 'react'\r\nimport { Container, Row, Col } from 'reactstrap'\r\nimport profile from '../profile.json'\r\nimport moment from 'moment'\r\nimport 'moment/locale/ru'  // without this line it didn't work\r\nimport { Media } from 'reactstrap'\r\n\r\nconst getDuration = (duration) => {\r\n    const years = parseInt(duration / 12)\r\n    const months = duration % 12\r\n    let yearsStr = \"\"\r\n    if (years > 0){\r\n        yearsStr += years\r\n        if (years % 10 === 1) yearsStr += ' год'\r\n        else if (years % 10 === 2 || years % 10 === 3 || years % 10 === 4) yearsStr += ' года'\r\n        else yearsStr += ' лет'\r\n    } \r\n\r\n    let monthStr = \"\"\r\n    if (months > 0){\r\n        if (years > 0) monthStr += \" \"\r\n        monthStr += months        \r\n        if (months % 10 === 1) monthStr += ' месяц'\r\n        else if (months % 10 === 2 || months % 10 === 3 || months % 10 === 4) monthStr += ' месяца'\r\n        else monthStr += ' месяцев'\r\n    } \r\n   \r\n    return yearsStr + monthStr;\r\n}\r\n\r\nconst Experience = () => {\r\n    return <Container>\r\n        <Row>\r\n            <Col>\r\n                {profile.experiences.map((experience, i) => {\r\n                    moment.locale('ru')      \r\n\r\n                    const totalDuration = experience.roles.reduce((cnt, role) => {\r\n                        const startDate = moment(role.startDate)\r\n                        const timeEnd = moment(role.currentJob ? new Date() : new Date(role.endDate))\r\n                        const duration = moment.duration(timeEnd.diff(startDate))\r\n                        return Number(cnt) + Number(duration.asMonths().toPrecision(1))\r\n                    }, 0)\r\n\r\n                    return (\r\n                        <div key={i}>\r\n                            <Media>\r\n                                <Media left top href={experience.url}>\r\n                                    <Media object src={experience.logo} alt={experience.companyName} />\r\n                                </Media>\r\n                                <Media body>\r\n                                    <Media heading>\r\n                                        <a href={experience.url}>{experience.companyName}</a>\r\n                                        <span className=\"jobTotalDuration\">{getDuration(totalDuration)}</span>\r\n                                    </Media>\r\n\r\n                                    {experience.roles.map((role, j) => {\r\n                                        const startDate = moment(role.startDate)                                       \r\n                                        const timeEnd = moment(role.currentJob ? new Date() : new Date(role.endDate))\r\n                                        const duration = Number(moment.duration(timeEnd.diff(startDate)).asMonths().toPrecision(1))\r\n\r\n                                        return <div key={j}>\r\n                                            <h5>{role.title}</h5>\r\n                                            <span className='jobDuration'>{startDate.format('MMM YYYY')} - {role.currentJob ? 'по настоящее время' : timeEnd.format('MMM YYYY')} ({getDuration(duration)})</span>\r\n                                            <p className='jobLocation'>{role.location}</p>                                           \r\n                                            {role.descriptions.map((description, k) => <p key={k} className='jobDescription'>\r\n                                                {description}\r\n                                            </p>)}\r\n                                        </div>\r\n                                    })}\r\n                                </Media>\r\n                            </Media>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n}\r\n\r\nexport default Experience","import React from 'react'\r\nimport {Container, Row, Col, Media} from 'reactstrap'\r\nimport moment from 'moment'\r\nimport 'moment/locale/ru'  // without this line it didn't work\r\nimport profile from '../profile.json'\r\n\r\nconst getYearDuration = (year) => {\r\n    if (year % 10 === 1) return year + \" год\"\r\n    if (year % 10 === 2 || year % 10 === 3 || year % 10 === 4) return year + \" года\"\r\n    return year + \" лет\"\r\n}\r\n\r\nconst Education = () => (\r\n    <Container>\r\n        <Row>\r\n            <Col>\r\n                {profile.studies.map((study,i) => {\r\n                    moment.locale('ru')\r\n                    return <Media key={i}>\r\n                        <Media left top href={study.url}>\r\n                            <Media object src={study.logo} alt={study.institute}/>\r\n                        </Media>\r\n                        <Media body>\r\n                            <Media heading>\r\n                                <a href={study.url}>{study.institute}</a>\r\n                            </Media>\r\n                            {\r\n                                [\r\n                                    {\r\n                                        \"key\":\"Специальность\",\r\n                                        \"value\":study.title\r\n                                    },                                    \r\n                                    {\r\n                                        \"key\":\"Год выпуска\",\r\n                                        \"value\":study.graduationYear\r\n                                    },\r\n                                    {\r\n                                        \"key\":\"Длительность обучеия\",\r\n                                        \"value\":getYearDuration(study.durationInYears)\r\n                                    }\r\n                                ].map((object, i) => <div key={i}>\r\n                                    <Row>\r\n                                        <Col className='formLabel'>{object.key}</Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>{object.value}</Col>\r\n                                    </Row>\r\n                                </div>)\r\n                            }\r\n                        </Media>\r\n                    </Media>\r\n                })}\r\n            </Col>\r\n        </Row>\r\n        <br/>\r\n        <br/>\r\n\r\n        <Row>\r\n            <Col>\r\n            <h4>Сертификаты:</h4>\r\n            <hr />\r\n            {profile.certifications.map((certification, i) => {\r\n                const verification = certification.verificationLink ? \r\n                <Row>\r\n                    <Col>\r\n                        <a className='certificateLink' href={certification.verificationLink}>Сертификат</a>\r\n                    </Col>\r\n                </Row> : \"\"\r\n                return <Media key={i}>\r\n                    <Media left top href={certification.url}>\r\n                        <Media object src={certification.logo} alt={certification.title} />\r\n                    </Media>\r\n                    <Media body>\r\n                        <Media heading>\r\n                            <a href={certification.url}>{certification.title}</a>\r\n                        </Media>\r\n                        <Row>\r\n                            <Col>{moment(certification.issueDate).format('MMM YYYY')}</Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col>{certification.issuer}</Col>\r\n                        </Row>\r\n                        {verification}\r\n                    </Media>\r\n                </Media>\r\n            })}\r\n            </Col>\r\n        </Row>\r\n\r\n    </Container>\r\n)\r\nexport default Education","import React from 'react'\r\nimport { Container } from \"reactstrap\";\r\n\r\nconst About = () => <Container>\r\n    <p>Раздел находится в разработке</p>\r\n</Container>\r\nexport default About","import React from 'react'\r\n\r\nimport { Container } from \"reactstrap\";\r\n\r\nconst Contacts = () => <Container>\r\n    <p>Раздел находится в разработке</p>\r\n</Container>\r\n\r\nexport default Contacts","import React, { useState } from 'react'\r\nimport { Jumbotron, Container, TabContent, TabPane, Nav, NavItem, NavLink } from \"reactstrap\";\r\nimport Experience from './Experience'\r\nimport Education from './Education'\r\nimport profile from '../profile.json'\r\nimport classnames from 'classnames';\r\n\r\nimport { Route, Switch } from 'react-router';\r\nimport About from './About'\r\nimport Contacts from './Contacts'\r\n\r\nconst Profile = () => {\r\n    const [activeTab, setActiveTab] = useState(1)\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron>\r\n                <Container>\r\n                    <h1 className='j-header'>{profile.title}</h1>\r\n                    <p className='lead'>{profile.summary}</p>\r\n                </Container>\r\n            </Jumbotron>\r\n\r\n            <Switch>\r\n                <Route exact path='/about' component={About} />\r\n                <Route exact path='/contacts' component={Contacts} />\r\n\r\n                <Route path='/' render={props =>\r\n                    <Container>\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink className={classnames({ active: activeTab === 1 }, { navLink: true })}\r\n                                    onClick={() => setActiveTab(1)}>\r\n                                    Опыт работы\r\n                         </NavLink>\r\n                            </NavItem>\r\n\r\n                            <NavItem >\r\n                                <NavLink className={classnames({ active: activeTab === 2 }, { navLink: true })}\r\n                                    onClick={() => setActiveTab(2)}>\r\n                                    Образование\r\n                         </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n\r\n                        <TabContent activeTab={activeTab}>\r\n                            <TabPane tabId={1}>\r\n                                <Experience />\r\n                            </TabPane>\r\n\r\n                            <TabPane tabId={2}>\r\n                                <Education />\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Container>\r\n                } />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import React from 'react'\r\nimport {Container} from 'reactstrap'\r\nimport {FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faLinkedin, faGithub} from '@fortawesome/free-brands-svg-icons'\r\n\r\nconst Footer = () => (\r\n    <footer>\r\n        <hr />\r\n        <Container>           \r\n            <a href=\"https://github.com/morozec\"><FontAwesomeIcon icon={faGithub} /></a>\r\n        </Container>\r\n    </footer>\r\n)\r\nexport default Footer","import React from 'react';\nimport './App.css';\n\nimport TopBar from './components/TopBar'\nimport Profile from './components/Profile'\nimport Footer from './components/Footer'\n\nfunction App() {\n  return (  \n    <div className=\"App\">\n      <TopBar />\n      <Profile />\n      <Footer />      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href');\n\nReactDOM.render(\n    <BrowserRouter basename={baseUrl}>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}